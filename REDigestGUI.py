#!/usr/bin/env python3

# Name:     REDigestGUI.py
# Sign:     Abhi
# Modified: Tue Jul 19 10:20:33 CEST 2022

##########

__author__	= "Abhijeet Singh"
__copyright__	= "MIT License*"
__email__	= "abhijeet.singh@slu.se, abhijeetsingh.aau@gmail.com"

########### libraries
# import
import sys
import datetime
import os
import platform
from textwrap import dedent
import pandas as pd
import numpy as np
import matplotlib as mpl
if os.environ.get('DISPLAY','') == '':
    os.environ.__setitem__('DISPLAY', ':0.0')
    mpl.use('Agg')
from matplotlib.ticker import MaxNLocator
from matplotlib import pyplot
import matplotlib.pyplot as plt
#######################
# import from tkinter
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import filedialog as fd
from tkinter import messagebox as msg
from tkinter import Menu

#######################
# import from Biopython
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.Restriction import RestrictionBatch
from Bio.SeqRecord import SeqRecord
#from Bio.Alphabet import IUPAC
from Bio.SeqFeature import SeqFeature, FeatureLocation

################################################## main window
win = tk.Tk()
win.title("REDigest")
win.option_add('*Dialog.msg.font', 'Arial 10')
win.resizable(False, False)
################################################## error check and quit
# error message
def msgBox():
    msg.showerror("REDigest Error!", "Please provide required fields")


# Helpbox1
def _helpBox1():
    msg.showinfo("REDigest Help!", dedent("""
    Tab1\tRestriction & Visualization
    ----------------------------------------------
    # Input/output
    ---------------
    1) Input file = multifasta gene or genome file
    2) Infile format = fasta or genbank; def: fasta
    3) Output file = output file; def: redigest.<DATE>.out
    4) Outputfile format = output file format, fasta or genbank; default = fasta
    ---------------
    # Restriction Enzyme
    ---------------
    1) Enzyme name =  Restriction enzyme (case sensitive)
    ---------------
    # Primer Sequences
    ---------------
    * Please ignore this section while processing genome sequence *
    1) Labelled primer = fluorescence labelled primer for T-RFLP analysis; def: forward
    2) Forward primer = sequence of forward primer to be added to the input sequences
    3) Reverse primer = sequence of reverse primer to be added to the input sequences
    ---------------
    # Input Sequence type
    ---------------
    Multifasta gene or single genome file; def: multifasta gene
    ---------------
    # Visualization
    ---------------
    Plot title = title to on plot; def: restriction enzyme"""))


# Helpbox2
def _helpBox2():
    msg.showinfo("REDigest Help!", dedent("""
    Tab2\tVisualization
    ----------------------------------------------
    # Input/Output
    ---------------
    1) Input file = .csv file generated by REDigest
    2) Output plot = name of output plot file; def: redigest.<DATE>.png
    3) Plot size = plot size in dpi; def: 300
    4) Plot format = output file format; def: .png
    ---------------
    # Plot labels
    ---------------
    1) Plot title = plot title; def: Cluster plot
    2) X-axis label = x-axis label; def: Fragment frequency (counts)
    3) Y-axis label = y-axis label; def: Fragment size (bp)
    ---------------
    # Plot colour
    ---------------
    Plot Colour = colour palette; def: tab20b_r"""))


def _aboutBox():
    msg.showinfo("REDigest About!", dedent("""
    REDigest version 2.0

    MIT License*

    Copyright (c) 2020 Abhijeet Singh
    Anaerobic Microbiology and Biotechnology group (AMB)
    Department of Molecular Sciences
    Swedish University of Agricultural Sciences (SLU)
    Uppsala, Sweden

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    The software is provided \"AS IS\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.
    *small changes made in standard licence

    For more information, please check the README file or visit https://github.com/abhijeetsingh1704/REDigest"""))


def _cite():
    msg.showinfo("REDigest Citation!", dedent("""SINGH, Abhijeet. REDigest: a Python GUI for In-Silico restriction digestion analysis of genes or complete genome sequences. bioRxiv 2021.11.09.467873; doi: https://doi.org/10.1101/2021.11.09.467873"""))


# quit
def _quit():
    win.quit()
    win.destroy()
    exit()


# help menu
def _help1():
    _helpBox1()


def _help2():
    _helpBox2()

################################################## Menu
# bar
menuBar = Menu(win)
win.config(menu=menuBar)

# menu
# if on MacOS, put menu items in a dropdown as empty menu items are not allowed
menuDropdown = Menu(menuBar)
if platform.system() == 'Darwin':
    targetmenu = menuDropdown
else:
    targetmenu = menuBar

targetmenu.add_command(label="Exit", command=_quit)
targetmenu.add_command(label="Help_Tab1", command=_help1)
targetmenu.add_command(label="Help_Tab2", command=_help2)
targetmenu.add_command(label="About", command=_aboutBox)
targetmenu.add_command(label="Citation", command=_cite)

if platform.system() == 'Darwin':
    menuBar.add_cascade(label="REDigest", menu=menuDropdown)

################################################## Tabs
# tab control
tabcontrol = ttk.Notebook(win)
tab1 = ttk.Frame(tabcontrol)
tabcontrol.add(tab1, text="Restriction & Visualization")
tab2 = ttk.Frame(tabcontrol)
tabcontrol.add(tab2, text="Visualization")
tabcontrol.pack(fill="both")

########################################################### Frame 1
# frame1 element
frame1 = ttk.Style()
frame1.configure("frame1.Label", font=("TkDefaultFont", 10, "bold"))
frame1.configure("frame1.Label", foreground ='blue')
frame1_label1 = ttk.Label(text="Input / Output files", style="frame1.Label")
file_frame = ttk.Labelframe(tab1, labelwidget=frame1_label1)
file_frame.grid(column=0, row=0, sticky=tk.W, padx = 4, pady=0)
#
# label1 = input file
label1 = ttk.Label(file_frame, text="Input file: * \t")
label1.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)
label1.configure(foreground="red")
# entry1 box = input file name
entry1 = tk.StringVar()
entry1_input = ttk.Entry(file_frame, width=30, textvariable=entry1)
entry1_input.grid(column=1, row=0, sticky=tk.W, padx = 0, pady=2)
entry1_input.focus()

# browse input_file
def Browse_file():
    filename = fd.askopenfilename(filetypes=[("fasta files","*.f*a*"),("text files","*.txt"),("All files","*.*")] if platform.system() != 'Darwin' else (),
                                  initialdir = ".",
                                  title = "Select file")
    entry1_input.insert(tk.END, filename)
    if filename:
        Browse_btn1.configure(text="Ok")
        label1.configure(foreground="green")
        label1.configure(text="Input filename:\t")
        ifile=entry1_input.get()
        print("Input file:\t", ifile)
    else:
        filename = fd.askopenfilename(filetypes=[("All files","*.*")] if platform.system() != 'Darwin' else (),
                                      initialdir = ".",
                                      title = "Select file")
        entry1_input.insert(tk.END, filename)
    if entry1_input.get() == "":
        msgBox()


# click browse button for input
Browse_btn1 = ttk.Button(file_frame, text="Browse", command=Browse_file)
Browse_btn1.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)

# mandatory label for input
# Mandatory1 = ttk.Label(file_frame, text="Required\t\t", foreground="red")
# Mandatory1.grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)

################################################# Label 2
# label2
label2 = ttk.Label(file_frame, text="Output file:\t")
label2.grid(column=0, row=2, sticky=tk.W, padx = 0, pady=2)

# entry2 box
entry2 = tk.StringVar()
entry2_input = ttk.Entry(file_frame, width=30, textvariable=entry2)
entry2_input.grid(column=1, row=2, sticky=tk.W, padx = 0, pady=2)
entry2_input.focus()


# button
def click_button_entry2():
    entry2btn.configure(text="Ok")
    label2.configure(foreground="green")
    label2.configure(text="Output filename:\t")
    ioutput = entry2_input.get()
    print("Output file:\t", ioutput)


# click_button entry2
entry2btn = ttk.Button(file_frame, text="Click", command=click_button_entry2)
entry2btn.grid(column=2, row=2, sticky=tk.W, padx = 0, pady=2)
########################################################### Frame 2
#frame2 element
frame2 = ttk.Style()
frame2.configure("frame2.Label", font=("TkDefaultFont", 10, "bold"))
frame2.configure("frame2.Label", foreground ='blue')
frame2_label1 = ttk.Label(text="Restriction Enzyme", style="frame2.Label")
enzyme_frame = ttk.Labelframe(tab1, labelwidget=frame2_label1)
enzyme_frame.grid(column=0, row=1, sticky=tk.W, padx = 4, pady=0)

################################################# Label 3
label3 = ttk.Label(enzyme_frame, text="Enzyme: * \t")
label3.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)
label3.configure(foreground="red")
# entry2 box
entry3 = tk.StringVar()
entry3_input = ttk.Entry(enzyme_frame, width=30, textvariable=entry3)
entry3_input.grid(column=1, row=0, sticky=tk.W, padx = 0, pady=2)
entry3_input.focus()
ienzyme = entry3_input.get()


# button
def click_button_entry3():
    if entry3_input.get() == "":
        msgBox()
    else:
        entry3btn.configure(text="Ok")
        label3.configure(foreground="green")
        label3.configure(text="Enzyme:\t")
        ienzyme = entry3_input.get()
        print("Input Enzyme:\t", ienzyme)


# click_button entry2
entry3btn = ttk.Button(enzyme_frame, text="Click",
command=click_button_entry3)
entry3btn.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)
# mandatory label3
# Mandatory3 = ttk.Label(enzyme_frame, text="Required\t\t", foreground="red")
# Mandatory3.grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)
Mandatory3info = ttk.Label(enzyme_frame, text="# case sensitive!\n# Ex: Hpy188III", foreground="red")
Mandatory3info.grid(column=0, row=1, sticky=tk.W, padx = 4, pady=0)
########################################################### Frame 3
#frame3 element
frame3 = ttk.Style()
frame3.configure("frame3.Label", font=("TkDefaultFont", 10, "bold"))
frame3.configure("frame3.Label", foreground ='blue')
frame3_label1 = ttk.Label(text="Primer Sequences (ignore section for genome)", style="frame3.Label")
primer_frame = ttk.Labelframe(tab1, labelwidget=frame3_label1)
primer_frame.grid(column=0, row=2, sticky=tk.W, padx = 4, pady=0)

################################################# Label 4
# label4
label4 = ttk.Label(primer_frame, text="Labelled primer:\t")
label4.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)
# entry4 box
entry4 = tk.StringVar()
entry4_input = ttk.Combobox(primer_frame, width=27, textvariable=entry4)
entry4_input['values'] = ("Forward" , "Reverse")
entry4_input.grid(column=1, row=0, sticky=tk.E, padx = 0, pady=2)
entry4_input.current(0)


# button
def click_button_entry4():
    entry4btn.configure(text="Ok")
    label4.configure(foreground="green")
    label4.configure(text="Tagged primer\t")
    if entry4_input.get() == "Forward":
        itag = str("Forward")
    elif entry4_input.get() == "Reverse":
        itag = str("Reverse")
    print("Tagged primer:\t", itag)


# click_button entry4
entry4btn = ttk.Button(primer_frame, text="Click",
command=click_button_entry4)
entry4btn.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)
# mandatory label3
# Mandatory4 = ttk.Label(primer_frame, text="*Forward\t\t", foreground="black")
# Mandatory4.grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)

################################################# Label 5
# label5
label5 = ttk.Label(primer_frame, text="Forward primer:\t")
label5.grid(column=0, row=1, sticky=tk.W, padx = 0, pady=2)
# entry5 box
entry5 = tk.StringVar()
entry5_input = ttk.Entry(primer_frame, width=30, textvariable=entry5)
entry5_input.grid(column=1, row=1, sticky=tk.E, padx = 0, pady=2)
entry5_input.focus()


# button
def click_button_entry5():
    entry5btn.configure(text="Ok")
    label5.configure(foreground="green")
    label5.configure(text="Forward Seq\t")
    i_fprimer = entry5_input.get()
    print("Forward primer:\t5'-"+i_fprimer+"-3'")


#
# # click_button entry5
entry5btn = ttk.Button(primer_frame, text="Click",
command=click_button_entry5)
entry5btn.grid(column=2, row=1, sticky=tk.W, padx = 0, pady=2)

################################################# Label 6
# label6
label6 = ttk.Label(primer_frame, text="Reverse primer:\t")
label6.grid(column=0, row=2, sticky=tk.W, padx = 0, pady=2)
# entry6 box
entry6 = tk.StringVar()
entry6_input = ttk.Entry(primer_frame, width=30, textvariable=entry6)
entry6_input.grid(column=1, row=2, sticky=tk.E, padx = 0, pady=2)
entry6_input.focus()


# button
def click_button_entry6():
    entry6btn.configure(text="Ok")
    label6.configure(foreground="green")
    label6.configure(text="Reverse Seq\t")
    i_rprimer = entry6_input.get()
    print("Reverse primer:\t5'-" + i_rprimer + "-3'")


#
# # click_button entry6
entry6btn = ttk.Button(primer_frame, text="Click",
command=click_button_entry6)
entry6btn.grid(column=2, row=2, sticky=tk.W, padx = 0, pady=2)

########################################################### Frame 4
#frame4 element
frame4 = ttk.Style()
frame4.configure("frame4.Label", font=("TkDefaultFont", 10, "bold"))
frame4.configure("frame4.Label", foreground ='blue')
frame4_label1 = ttk.Label(text="Input Sequences type", style="frame4.Label")
type_frame = ttk.Labelframe(tab1, labelwidget=frame4_label1)
type_frame.grid(column=0, row=3, sticky=tk.W, padx = 4, pady=0)

################################################ Label 7
# label7
label7 = ttk.Label(type_frame, text="Input type:\t")
label7.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)

# entry7 box
entry7 = tk.StringVar()
entry7_input = ttk.Combobox(type_frame, width=27, textvariable=entry7)
entry7_input['values'] = ("Multifasta gene file" , "Single genome sequence")
entry7_input.grid(column=1, row=0, sticky=tk.W, padx = 0, pady=2)
entry7_input.current(0)
itype = entry7_input.get()


# button
def click_button_entry7():
    entry7btn.configure(text="Ok")
    label7.configure(foreground="green")
    label7.configure(text="File type:\t\t")
    itype = entry7_input.get()
    print("Input type:\t" + itype)


# click_button entry7
entry7btn = ttk.Button(type_frame, text="Click",
command=click_button_entry7)
entry7btn.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)
# legend for input type
# Mandatory7 = ttk.Label(type_frame, text="*gene file\t", foreground="black")
# Mandatory7.grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)

################################################ Label 8
# label8
label8 = ttk.Label(file_frame, text="Infile format:\t")
label8.grid(column=0, row=1, sticky=tk.W, padx = 0, pady=2)

# entry8 box
entry8 = tk.StringVar()
entry8_input = ttk.Combobox(file_frame, width=27, textvariable=entry8)
entry8_input['values'] = ("Fasta" , "Genbank")
entry8_input.grid(column=1, row=1, sticky=tk.W, padx = 0, pady=2)
entry8_input.current(0)


# button
def click_button_entry8():
    entry8btn.configure(text="Ok")
    label8.configure(foreground="green")
    label8.configure(text="Input format:\t")
    iformat = entry8_input.get()
    print("Input file format:\t", iformat)


# click_button entry8
entry8btn = ttk.Button(file_frame, text="Click", command=click_button_entry8)
entry8btn.grid(column=2, row=1, sticky=tk.W, padx = 0, pady=2)

# legend for input format
# Mandatory8 = ttk.Label(file_frame, text="*fasta\t\t", foreground="black")
# Mandatory8.grid(column=5, row=1, sticky=tk.W, padx = 4, pady=4)
################################################ Label 9
# label9
label9 = ttk.Label(file_frame, text="Outfile format:\t")
label9.grid(column=0, row=3, sticky=tk.W, padx = 0, pady=2)

# entry9 box
entry9 = tk.StringVar()
entry9_input = ttk.Combobox(file_frame, width=27, textvariable=entry9)
entry9_input['values'] = ("Fasta" , "Genbank")
entry9_input.grid(column=1, row=3, sticky=tk.W, padx = 0, pady=2)
entry9_input.current(0)


# button
def click_button_entry9():
    entry9btn.configure(text="Ok")
    label9.configure(foreground="green")
    label9.configure(text="Output format:\t")
    oformat = entry9_input.get()
    print("Output file format:\t", oformat)


# click_button entry8
entry9btn = ttk.Button(file_frame, text="Click", command=click_button_entry9)
entry9btn.grid(column=2, row=3, sticky=tk.W, padx = 0, pady=2)
#
# legend for output format
# Mandatory9 = ttk.Label(file_frame, text="*fasta\t\t", foreground="black")
# Mandatory9.grid(column=5, row=3, sticky=tk.W)

########################################################### Frame 5
#frame5 element
frame5 = ttk.Style()
frame5.configure("frame5.Label", font=("TkDefaultFont", 10, "bold"))
frame5.configure("frame5.Label", foreground ='blue')
frame5_label1 = ttk.Label(text="Visualization", style="frame5.Label")
visu_frame = ttk.Labelframe(tab1, labelwidget=frame5_label1)
visu_frame.grid(column=0, row=4, sticky=tk.W, padx = 4, pady=0)
################################################ Label 8
# label10
label10 = ttk.Label(visu_frame, text="Plot title:\t\t")
label10.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)
# entry 10
entry10 = tk.StringVar()
entry10_input = ttk.Entry(visu_frame, width=30, textvariable=entry10)
entry10_input.grid(column=1, row=0, sticky=tk.W, padx = 0, pady=2)
entry10_input.focus()


# button
def click_button_entry10():
    entry10btn.configure(text="Ok")
    label10.configure(foreground="green")
    label10.configure(text="Title:\t\t")
    iplot = entry10_input.get()
    print("Plot title:\t", iplot)


# click_button entry10
entry10btn = ttk.Button(visu_frame, text="Click", command=click_button_entry10)
entry10btn.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)
# mandatory entry 10
# Mandatory10 = ttk.Label(visu_frame, text="\t\t  ").grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)
##########################################################

########################################################## # Legend
# Legend1
# Legend1 = ttk.Label(win, text="* = default\t", foreground="black")
# Legend1.grid(column=0, row=15, sticky=tk.E, padx = 4, pady=4)

########################################################### Tab 2
# tab2frame1
# frame1T2 element
frame1T2 = ttk.Style()
frame1T2.configure("frame1T2.Label", font=("TkDefaultFont", 10, "bold"))
frame1T2.configure("frame1T2.Label", foreground ='blue')
frame1T2_label1T2 = ttk.Label(text="Input / Output", style="frame1T2.Label")
file_frameT2 = ttk.Labelframe(tab2, labelwidget=frame1T2_label1T2)
file_frameT2.grid(column=0, row=0, sticky=tk.W, padx = 4, pady=0)
#
# label1T2 = input file
label1T2 = ttk.Label(file_frameT2, text="Input file: * \t")
label1T2.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)
label1T2.configure(foreground="red")
# entry1T2 box = input file name
entry1T2 = tk.StringVar()
entry1T2_input = ttk.Entry(file_frameT2, width=30, textvariable=entry1T2)
entry1T2_input.grid(column=1, row=0, sticky=tk.W, padx = 0, pady=2)
entry1T2_input.focus()


# browse input_file
def Browse_fileT2():
    filenameT2 = fd.askopenfilename(filetypes=[("csv files", "*.csv"), ("All files", "*.*")] if platform.system() != 'Darwin' else (),
                                    initialdir = ".",
                                    title = "Select file")
    entry1T2_input.insert(tk.END, filenameT2)
    if filenameT2 :
        Browse_btn1.configure(text="Ok")
        label1T2.configure(foreground="green")
        label1T2.configure(text="Input filename:\t")
        ifileT2=entry1T2_input.get()
        print("Input file:\t", ifileT2)
    else:
        filenameT2 = fd.askopenfilename(filetypes=[("All files", "*.*")] if platform.system() != 'Darwin' else (),
                                        initialdir = ".",
                                        title = "Select file")
        entry1T2_input.insert(tk.END, filenameT2)
    if entry1T2_input.get() == "":
        msgBox()


# click browse button for input
Browse_btn1T2 = ttk.Button(file_frameT2, text="Browse", command=Browse_fileT2)
Browse_btn1T2.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)
# mandatory label for input
# Mandatory1T2 = ttk.Label(file_frameT2, text="\t", foreground="red")
# Mandatory1T2.grid(column=5, row=0, sticky=tk.E, padx = 4, pady=4)
################################################# Label 2T2
# label2T2
label2T2 = ttk.Label(file_frameT2, text="Output plot:\t")
label2T2.grid(column=0, row=2, sticky=tk.W, padx = 0, pady=2)
# entry2T2 box
entry2T2 = tk.StringVar()
entry2T2_input = ttk.Entry(file_frameT2, width=30, textvariable=entry2T2)
entry2T2_input.grid(column=1, row=2, sticky=tk.W, padx = 0, pady=2)
entry2T2_input.focus()


# button
def click_button_entry2T2():
    entry2T2btn.configure(text="Ok")
    label2T2.configure(foreground="green")
    label2T2.configure(text="Outplot name:\t")
    ioutputT2 = entry2T2_input.get()
    print("Output file:\t", ioutputT2)


# click_button entry2T2
entry2T2btn = ttk.Button(file_frameT2, text="Click", command=click_button_entry2T2)
entry2T2btn.grid(column=2, row=2, sticky=tk.W, padx = 0, pady=2)
################################################# Label 3T2
# label3T2
label3T2 = ttk.Label(file_frameT2, text="Plot size:\t")
label3T2.grid(column=0, row=3, sticky=tk.W, padx = 0, pady=2)
# entry3T2 box
entry3T2 = tk.StringVar()
entry3T2_input = ttk.Combobox(file_frameT2, width=27, textvariable=entry3T2)
entry3T2_input["values"] = ("100", "200", "300", "400", "500", "600", "700", "800", "900", "1000")
entry3T2_input.grid(column=1, row=3, sticky=tk.W, padx = 0, pady=2)
entry3T2_input.current(2)


# button
def click_button_entry3T2():
    entry3T2btn.configure(text="Ok")
    label3T2.configure(foreground="green")
    label3T2.configure(text="Outplot size:\t")
    ioutplotT2 = entry3T2_input.get()
    print("Outplot size:\t", ioutplotT2)


# click_button entry2T2
entry3T2btn = ttk.Button(file_frameT2, text="Click", command=click_button_entry3T2)
entry3T2btn.grid(column=2, row=3, sticky=tk.W, padx = 0, pady=2)
#info
# info1T2 = ttk.Label(file_frameT2, text="\t", foreground="black")
# info1T2.grid(column=5, row=3, sticky=tk.W, padx = 4, pady=4)
# info2T2 = ttk.Label(file_frameT2, text="# dpi, Ex: 300\t", foreground="red")
# info2T2.grid(column=0, row=4, sticky=tk.W, padx = 4)

################################################# Label 8T2
# label8T2
label8T2 = ttk.Label(file_frameT2, text="Plot format:\t")
label8T2.grid(column=0, row=4, sticky=tk.W, padx = 0, pady=2)
# entry8T2 box
entry8T2 = tk.StringVar()
entry8T2_input = ttk.Combobox(file_frameT2, width=27, textvariable=entry8T2)
entry8T2_input["values"] = ("eps", "jpg", "pdf", "pgf", "png", "ps", "raw", "svg", "tif")
entry8T2_input.grid(column=1, row=4, sticky=tk.W, padx = 0, pady=2)
entry8T2_input.current(4)


# button
def click_button_entry8T2():
    entry8T2btn.configure(text="Ok")
    label8T2.configure(foreground="green")
    label8T2.configure(text="Outplot format:\t")
    ioutfmtT2 = entry8T2_input.get()
    print("Outplot format:\t", ioutfmtT2)


# click_button entry8T2
entry8T2btn = ttk.Button(file_frameT2, text="Click", command=click_button_entry8T2)
entry8T2btn.grid(column=2, row=4, sticky=tk.W, padx = 0, pady=2)
#################################################frame2T2

# frame2T2 element
frame2T2 = ttk.Style()
frame2T2.configure("frame2T2.Label", font=("TkDefaultFont", 10, "bold"))
frame2T2.configure("frame2T2.Label", foreground ='blue')
frame2T2_label1T2 = ttk.Label(text="Plot labels", style="frame2T2.Label")
plot_frameT2 = ttk.Labelframe(tab2, labelwidget=frame2T2_label1T2)
plot_frameT2.grid(column=0, row=1, sticky=tk.W, padx = 4, pady=0)
#
# label4T2F2
label4T2F2 = ttk.Label(plot_frameT2, text="Plot title:\t")
label4T2F2.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)
# entry1T2F2 box = input file name
entry4T2F2 = tk.StringVar()
entry4T2F2_input = ttk.Entry(plot_frameT2, width=30, textvariable=entry4T2F2)
entry4T2F2_input.grid(column=1, row=0, sticky=tk.W, padx = 0, pady=2)
entry4T2F2_input.focus()


# button
def click_button_entry4T2F2():
    entry4T2F2btn.configure(text="Ok")
    label4T2F2.configure(foreground="green")
    label4T2F2.configure(text="Output plot title:\t")
    ioutplottitleT2 = entry4T2F2_input.get()
    print("Out plot title:\t", ioutplottitleT2)


# click_button entry2T2
entry4T2F2btn = ttk.Button(plot_frameT2, text="Click", command=click_button_entry4T2F2)
entry4T2F2btn.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)
# entry4T2F2tab = ttk.Label(plot_frameT2, text="\t").grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)
####################################################
# label5T2F2
label5T2F2 = ttk.Label(plot_frameT2, text="X-axis label:\t")
label5T2F2.grid(column=0, row=1, sticky=tk.W, padx = 0, pady=2)
# entry5T2F2 box = input file name
entry5T2F2 = tk.StringVar()
entry5T2F2_input = ttk.Entry(plot_frameT2, width=30, textvariable=entry5T2F2)
entry5T2F2_input.grid(column=1, row=1, sticky=tk.W, padx = 0, pady=2)
entry5T2F2_input.focus()


# button
def click_button_entry5T2F2():
    entry5T2F2btn.configure(text="Ok")
    label5T2F2.configure(foreground="green")
    label5T2F2.configure(text="X-axis label:\t")
    iXlabT2 = entry5T2F2_input.get()
    print("X-axis label:\t", iXlabT2)


# click_button entry5T2F2
entry5T2F2btn = ttk.Button(plot_frameT2, text="Click", command=click_button_entry5T2F2)
entry5T2F2btn.grid(column=2, row=1, sticky=tk.W, padx = 0, pady=2)
# entry5T2F2tab = ttk.Label(plot_frameT2, text="\t").grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)
####################################################
# label6T2F2
label6T2F2 = ttk.Label(plot_frameT2, text="Y-axis label:\t")
label6T2F2.grid(column=0, row=2, sticky=tk.W, padx = 0, pady=2)
# entry6T2F2 box = input file name
entry6T2F2 = tk.StringVar()
entry6T2F2_input = ttk.Entry(plot_frameT2, width=30, textvariable=entry6T2F2)
entry6T2F2_input.grid(column=1, row=2, sticky=tk.W, padx = 0, pady=2)
entry6T2F2_input.focus()


# button
def click_button_entry6T2F2():
    entry6T2F2btn.configure(text="Ok")
    label6T2F2.configure(foreground="green")
    label6T2F2.configure(text="Y-axis label:\t")
    iYlabT2 = entry6T2F2_input.get()
    print("Y-axis label:\t", iYlabT2)


# click_button entry6T2F2
entry6T2F2btn = ttk.Button(plot_frameT2, text="Click", command=click_button_entry6T2F2)
entry6T2F2btn.grid(column=2, row=2, sticky=tk.W, padx = 0, pady=2)
# entry6T2F2tab = ttk.Label(plot_frameT2, text="\t").grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)
#################################################frame3T2
# frame3T2 element
frame3T2 = ttk.Style()
frame3T2.configure("frame3T2.Label", font=("TkDefaultFont", 10, "bold"))
frame3T2.configure("frame3T2.Label", foreground ='blue')
frame3T2_label1T2 = ttk.Label(text="Plot colour", style="frame3T2.Label")
colr_frameT2 = ttk.Labelframe(tab2, labelwidget=frame3T2_label1T2)
colr_frameT2.grid(column=0, row=2, sticky=tk.W, padx = 4, pady=0)
#
# label7T2F2
label7T2F2 = ttk.Label(colr_frameT2, text="Plot Colour:\t")
label7T2F2.grid(column=0, row=0, sticky=tk.W, padx = 0, pady=2)
# entry7T2F2 box = input file name
entry7T2F2 = tk.StringVar()
entry7T2F2_input = ttk.Combobox(colr_frameT2, width=27, textvariable=entry7T2F2)
entry7T2F2_input['values'] = pyplot.colormaps()
entry7T2F2_input.grid(column=1, row=0, sticky=tk.W, padx = 0, pady=2)
entry7T2F2_input.current(57)
entry7T2F2_input.focus()


# button
def click_button_entry7T2F2():
    entry7T2F2btn.configure(text="Ok")
    label7T2F2.configure(foreground="green")
    label7T2F2.configure(text="Outplot colour:\t")
    icolrplotT2 = entry7T2F2_input.get()
    print("Outplot colour:\t", icolrplotT2)


# click_button entry2T2
entry7T2F2btn = ttk.Button(colr_frameT2, text="Click", command=click_button_entry7T2F2)
entry7T2F2btn.grid(column=2, row=0, sticky=tk.W, padx = 0, pady=2)
# entry7T2F2tab = ttk.Label(colr_frameT2, text="\t\t  ").grid(column=5, row=0, sticky=tk.W, padx = 4, pady=4)
##########################################################

##########################################################
# MAIN CODE CHECK
# catch start-time
date = datetime.datetime.now()
FULL_DATE = date.strftime("%Y-%m-%d %H:%M:%S")
TIME = date.strftime("%y%m%d%H%M%S")
BAD_chr = "|'!\"#$%&\'()*+,-/:;<=?@[\\]^_`}{~'"
#


def argscheck():
    if entry1_input.get() == "":
        msgBox()
    if entry3_input.get() == "":
        msgBox()


def redigest_code():
    argscheck()
    ### making outfile
    # output file
    if entry2_input.get() == "":
        outfile = 'redigest.'+ TIME + '.out'
    else:
        outfile=entry2_input.get()
    out_file = open(outfile, 'wt+')

    ### processing gene sequences
    if entry7_input.get() == "Multifasta gene file":
        genomeSeq = "N"
    elif entry7_input.get() == "Single genome sequence":
        genomeSeq = "Y"
    if genomeSeq == 'N':
        ### making report file
        verbosity = 'Y'
        report_file = outfile + '.csv'
        # open report file
        RF = open(report_file, 'wt+')
        # reverse complement the reverse primer
        if entry6_input.get() == "":
            reverse = ""
        else:
            reverse = entry6_input.get()
        reverse=str(Seq(reverse).reverse_complement())
        # counter for the NAME
        count=1
        ### iterating sequences
        input_file = entry1_input.get()
        infile= open(input_file, 'r')

        # input file format
        if entry8_input.get() == "Fasta":
            informat = "fasta"
        elif entry8_input.get() == "Genbank":
            informat = "genbank"
        for record in SeqIO.parse(infile, informat):
            header=record.description.replace(" ", "_")
            #
            for characters in BAD_chr:
                header=header.replace(characters, "_")
            #
            array=str(record.seq)
            NAME=str('RED' + TIME + str(count))
            #

            if informat == 'genbank':
                desc=str(', '.join(list(record.annotations["taxonomy"])))
            else:
                desc = ''
            ## adding primer sequence if provided
            if entry5_input.get() == "":
                forward = ""
            else:
                forward = entry5_input.get()
            if forward is not None:
                Farray=''.join(forward + array)
            else:
                Farray=array
            ### adding primer sequence if provided
            if entry6_input.get() == "":
                reverse = ""
            else:
                reverse = entry6_input.get()
            if reverse is not None:
                FarrayR=''.join(Farray.strip('\n') + reverse)
            else:
                FarrayR=Farray
            ### orientation based on tagged
            if entry4_input.get() == "Forward":
                tagg = str("F")
            elif entry4_input.get() == "Reverse":
                tagg = str("R")
            tagged=tagg.upper()
            if tagged == 'R':
                FarrayRseqFR=str(Seq(FarrayR).reverse_complement())
                SubFeat="TRF_RevComp"
            else:
                FarrayRseqFR=str(FarrayR)
                SubFeat="TRF"
            ### Restriction Enzyme check from list
            enzyme = entry3_input.get()
            enzyme_RE = RestrictionBatch([enzyme])
            ### search the restriction sites position in sequence
            FarrayRseqFR_RE=enzyme_RE.search(Seq(FarrayRseqFR))
            ### convert the dict to the list and indexing
            index=list(FarrayRseqFR_RE.values())[0]
            ### checking if restriction site is present or sequence will be uncut
            if not index:
                fragment=len(FarrayRseqFR)
            else:
                fragment=index[0]
            ### adding size to header and trimming sequence to terminal fragment length
            if not index:
                ### non-cut fragment header
                FastaHeader=NAME + "|" + str(len(FarrayRseqFR)) + "_bp" + "|" + header
                ### non-cut fragment sequence
                FastaSeq=FarrayRseqFR[:len(FarrayRseqFR)]
                Feat=SeqFeature(FeatureLocation(start=0, end=len(FarrayRseqFR)), type="REDigest", ref=SubFeat)
            else:
                ### cut fragment header
                FastaHeader=NAME + "|" + str(fragment) + "_bp" + "|" + header
                ### cut fragment sequence and slicing to the fragment length
                FastaSeq=FarrayRseqFR[:fragment]
                Feat=SeqFeature(FeatureLocation(start=0, end=fragment), type="REDigest", ref=SubFeat)
            ### terminal-screen output, info about sequence header and all the fragments
                ### based of verbosity

            if verbosity == 'Y':
                print(" ", FastaHeader, '\t', FarrayRseqFR_RE)
            ### counter for the locus name
            count +=1
            ### seq object
            # FastaSequence = SeqRecord(Seq(FastaSeq, IUPAC.IUPACAmbiguousDNA()), FastaHeader, description=desc, name=NAME)
            FastaSequence = SeqRecord(Seq(FastaSeq), FastaHeader, description=desc, name=NAME, annotations={"molecule_type": "DNA"})
            ### append features to seqobject
            FastaSequence.features.append(Feat)
            ### seq object
            if entry9_input.get() == "Fasta":
                outformat = "fasta"
            elif entry9_input.get() == "Genbank":
                outformat = "genbank"
            if outformat == 'genbank':
                SeqIO.write(FastaSequence, out_file, outformat)
            else:
                SeqIO.write(FastaSequence, out_file, "fasta-2line")
            ### writing progress to file too
            print(FastaHeader, '\t', FarrayRseqFR_RE, file=RF)
            #####################

############################################################### Genome
    else:
        ### parsing genome sequence
        ### making report file
        if entry9_input.get() == "Fasta":
            outformat = "fasta"
        elif entry9_input.get() == "Genbank":
            outformat = "genbank"
        if entry2_input.get() == "":
            outfile = 'redigest.'+ TIME + '.out'
        else:
            outfile=entry2_input.get()
        report_file = outfile + '_RF.csv'
        # open report file
        RF = open(report_file, 'wt+')
        print("Individual restriction fragments", file=RF)
        print("[WRITING:] Individual restriction fragments to file:", report_file)
        input_file = entry1_input.get()
        infile= open(input_file, 'r')
        # input file format
        if entry8_input.get() == "Fasta":
            informat = "fasta"
        elif entry8_input.get() == "Genbank":
            informat = "genbank"
        for record in SeqIO.parse(infile, informat):
            Gen_header=record.id.replace(" ", "_")
            for characters in BAD_chr:
                Gen_header = Gen_header.replace(characters, "_")
            
            Gen_array=str(record.seq)
            #
            if informat == 'genbank':
                desc=str(', '.join(list(record.annotations["taxonomy"])))
            else:
                desc = ''
            ### Restriction Enzyme check from list
            enzyme = entry3_input.get()
            enzyme_RE = RestrictionBatch([enzyme])
            ### search the restriction sites position in sequence
            Gen_array_RE=enzyme_RE.search(Seq(Gen_array))
            Gen_array_RE_V = list(Gen_array_RE.values())[0]

            print(Gen_array_RE)

            #
            ID0 = 0
            #
            if len(Gen_array_RE_V)==0:
                ID_min=0
            else:
                ID_min = min(Gen_array_RE_V)
            #
            if len(Gen_array_RE_V)==0:
                ID_max=0
            else:
                ID_max = max(Gen_array_RE_V)
            #
            ID1 = 0
            ID2 = 1
            # first fragment from first nt to first cut
            GenFastaSeq=Gen_array[0:ID_min]
            GenFastaSeqLen = len(GenFastaSeq)
            GenFastaHeader=Gen_header + "|" + str(GenFastaSeqLen) + "_bp|" + Gen_header
            GenFastaHeader=GenFastaHeader.replace(" ","_")
            # verbosity
            verbosity = "Y"
            if verbosity == 'Y':
                print(" ", GenFastaHeader)
            # seq object
            # GenSeqRec = SeqRecord(Seq(GenFastaSeq, IUPAC.IUPACAmbiguousDNA()), GenFastaHeader, description=desc)
            GenSeqRec = SeqRecord(Seq(GenFastaSeq), GenFastaHeader, description=desc, annotations={"molecule_type": "DNA"})
            ### seq object to file
            if outformat == 'genbank':
                SeqIO.write(GenSeqRec, out_file, outformat)
            elif outformat == 'fasta':
                SeqIO.write(GenSeqRec, out_file, outformat)
            # report to file
            print(GenFastaHeader, file=RF)
            #
            for GenomeFragment in Gen_array_RE_V:
                while ID2 < len(Gen_array_RE_V):
                    GenFastaSeq=Gen_array[Gen_array_RE_V[ID1]:Gen_array_RE_V[ID2]]
                    GenFastaSeqLen = len(GenFastaSeq)
                    GenFastaHeader=Gen_header + "|" + str(GenFastaSeqLen) + "_bp|" + Gen_header
                    GenFastaHeader=GenFastaHeader.replace(" ","_")
                    # verbosity
                    if verbosity == 'Y':
                        print(" ", GenFastaHeader)
                    # increment value for index
                    ID1 += 1
                    ID2 += 1
                    # seq object
                    # GenSeqRec = SeqRecord(Seq(GenFastaSeq, IUPAC.IUPACAmbiguousDNA()), GenFastaHeader, description=desc)
                    GenSeqRec = SeqRecord(Seq(GenFastaSeq), GenFastaHeader, description=desc, annotations={"molecule_type": "DNA"})
                    ### seq object to file
                    if outformat == 'genbank':
                        SeqIO.write(GenSeqRec, out_file, outformat)
                    elif outformat == 'fasta':
                        SeqIO.write(GenSeqRec, out_file, outformat)
                    # report to file
                    print(GenFastaHeader, file=RF)
            # last fragment from last cut to last nt
            GenFastaSeq=Gen_array[ID_max:]
            GenFastaSeqLen = len(GenFastaSeq)
            GenFastaHeader=Gen_header + "|" + str(GenFastaSeqLen) + "_bp|" + Gen_header
            GenFastaHeader=GenFastaHeader.replace(" ","_")
            # verbosity
            if verbosity == 'Y':
                print(" ", GenFastaHeader)
            # seq object
            # GenSeqRec = SeqRecord(Seq(GenFastaSeq, IUPAC.IUPACAmbiguousDNA()), GenFastaHeader, description=desc)
            GenSeqRec = SeqRecord(Seq(GenFastaSeq), GenFastaHeader, description=desc, annotations={"molecule_type": "DNA"})
            
            ### seq object to file
            if outformat == 'genbank':
                SeqIO.write(GenSeqRec, out_file, outformat)
            else:
                SeqIO.write(GenSeqRec, out_file, outformat)
            # report to file
            print(GenFastaHeader, file=RF)
            # getting all sequences from first nt to respective cut
            report_file2 = outfile + '_TRF.csv'
            # open report file
            TRF2 = open(report_file2, 'wt+')
            print("Terminal restriction fragments: from nucleotide 1 to respective cuts", file=TRF2)
            print("[WRITING:] Terminal restriction fragments, from nucleotide 1 to respective cuts to file:", report_file2)
            for GenomeFragment in Gen_array_RE_V:
                GenFastaHeader=Gen_header + "|" + str(GenomeFragment) + "_bp|" + Gen_header
                GenFastaHeader=GenFastaHeader.replace(" ","_")
                GenFastaSeq=Gen_array[:GenomeFragment]
                ### seq object
                # GenFastaSequence = SeqRecord(Seq(GenFastaSeq, IUPAC.IUPACAmbiguousDNA()), GenFastaHeader, description=desc)
                GenFastaSequence = SeqRecord(Seq(GenFastaSeq), GenFastaHeader, description=desc, annotations={"molecule_type": "DNA"})
                ### terminal-screen output, info about sequence header and all the fragments
                ### based of verbosity
                if verbosity == 'Y':
                    print(" ", GenFastaHeader)
                ### writing progress to file too
                print(GenFastaHeader, file=TRF2)
        ## close files
        TRF2.close()
        RF.close()
    # final close
    out_file.close()
    infile.close()


########################################################## Visu
def run_visuCode():
    #
    if entry2_input.get() == "":
        outfile = 'redigest.'+ TIME + '.out'
    else:
        outfile=entry2_input.get()
    #
    if entry7_input.get() == "Multifasta gene file":
        genomeSeq = "N"
    elif entry7_input.get() == "Single genome sequence":
        genomeSeq = "Y"
    #
    if genomeSeq == 'N':
        report_file = outfile + '.csv'
    elif genomeSeq == 'Y':
	    report_file = outfile + '_RF.csv'
    if entry10_input.get() == "":
        plotTitle = entry3_input.get() + " restriction fragment Plot"
    else:
        plotTitle = entry10_input.get()
    #
    data = pd.read_csv(report_file, delimiter='\t', names=['ID', 'Fragment'])
    data = data.drop(labels=0, axis=0)
    # delete fragment column
    data = data.drop(columns="Fragment")
    # split first column
    data = data[['ID' , "RF", 'OACC']] = data["ID"].str.split('|', expand=True)
    # remove the _bp text from fragment number
    df = data.replace(to_replace='_bp', value='', regex=True)[['ID', 'RF']]
    # make values as float to sort RF by increasing size
    df.RF = df.RF.astype(float)
    df = df.sort_values(by='RF')
    # add column of RF frequency
    df['frequency'] = df.groupby('RF')['RF'].transform('count')

    ############################################################
    #Plot figure
    plt.figure()
    plt.ylabel('Fragment size (bp)')
    plt.xlabel('Fragment frequency (counts)')
    plt.title(plotTitle)
    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))
    plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))

    # 
    MAX=int(df.RF.max())
    if MAX < 1000:
        ALPHA=0.9
        SIZE=50
    elif 100 < MAX < 2000:
        ALPHA=1
        SIZE=45
    elif 2000 < MAX < 3000:
        ALPHA=0.8
        SIZE=40
    elif 3000 < MAX:
        ALPHA=0.6
        SIZE=35
    
    # draw
    #Scatter_plot =
    plt.scatter(
        x=df.frequency,
        y=df.RF,
        # s=df.frequency,
        s=SIZE,
        c = df.RF,
        cmap='tab20b_r',
        alpha=ALPHA,
        edgecolors="black",
        linewidth=0.2,
        vmin=0
        )
    # add color map
    color_bar = plt.colorbar()
    color_bar.set_alpha(1)
    color_bar.draw_all()
    #make grids
    plt.grid('on', which='major', axis='y', linestyle='-.', linewidth=0.25)
    plt.grid('on', which='major', axis='x', linestyle='-.', linewidth=0.25)
    # save plot
    outplot = outfile + "_CLUSTERPLOT.png"
    plt.savefig(outplot, bbox_inches='tight', dpi=300, format="png")
    plt.close()
    ############################################################
    #Plot figure
    plt.figure()
    plt.xlabel('Fragment size (bp)')
    plt.ylabel('Fragment frequency (counts)')
    plt.title(plotTitle)
    plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))

    # draw
    # histogram =
    # histogram =
    plt.hist(x=df.RF, rwidth=0.5)
    outplot = outfile + "_HISTOGRAM.png"
    plt.savefig(outplot, bbox_inches='tight', dpi=300, format="png")
    plt.close()
    ############################################################
    
    df_part = np.array_split(df, 10)

    for i in range(0,10):
        
        MIN=min(df_part[i].RF)
        MAX=max(df_part[i].RF)
        #Plot figure
        plt.figure()
        plt.xlabel('Fragment size (bp)')
        plt.ylabel('Fragment frequency (counts)')
        plt.title(plotTitle)

        # draw
        #Scatter_plot =
        plt.scatter(
            x=df_part[i].RF,
            y=df_part[i].frequency,
            cmap='tab20b_r',
            # alpha=0.03,
            edgecolors="black",
            linewidth=1,
            vmin=MIN)
        #
        plt.draw()
        #make grids
        plt.grid('on', which='major', axis='y', linestyle='-.', linewidth=0.25)
        plt.grid('on', which='major', axis='x', linestyle='-.', linewidth=0.25)
        # save plot
        outplot = outfile + "." + str(i) + "_clst" + ".png"
        plt.savefig(outplot, bbox_inches='tight', dpi=300, format="png")
        plt.close()
    
    for i in range(0,10):
        
        MIN=min(df_part[i].RF)
        MAX=max(df_part[i].RF)
        
        # histogram =
        plt.figure()
        plt.xlabel('Fragment size (bp)')
        plt.ylabel('Fragment frequency (counts)')
        plt.title(plotTitle)
        plt.xlim(MIN, MAX)
        plt.draw()
        plt.hist(x=df_part[i].RF, rwidth=0.5)
        outplot = outfile + "." + str(i) + "_hist" + ".png"
        plt.savefig(outplot, bbox_inches='tight', dpi=300, format="png")
        plt.close()

#################################################################

############# visu code tab 2
def visu_codeT2():
    # input csv
    ifileT2=entry1T2_input.get()
    # output plot
    ioutputT2 = entry2T2_input.get()
    # size
    ioutsizeT2 = int(entry3T2_input.get())
    # format
    ioutfmtT2 = entry8T2_input.get()
    # outplot title
    ioutplottitleT2 = entry4T2F2_input.get()
    # xlab
    iXlabT2 = entry5T2F2_input.get()
    # ylab
    iYlabT2 = entry6T2F2_input.get()
    # plot color
    icolrplotT2 = entry7T2F2_input.get()
    ########### input check
    if entry1T2_input.get() == "":
        msgBox()
    # ########### output file
    if entry2T2_input.get() == "":
        ioutputT2 = "RedigestPlot" + TIME + "_CLUSTERPLOT." + entry8T2_input.get()
    else:
        ioutputT2 = entry2T2_input.get() + "." + entry8T2_input.get()
    # default plot Title
    if entry4T2F2_input.get() == "":
        ioutplottitleT2 = "Restriction fragment plot"
    # default x-axis label
    if entry5T2F2_input.get() == "":
        iYlabT2 = "Fragment frequency (counts)"
    # default y-axis label
    if entry6T2F2_input.get() == "":
        iXlabT2 = "Fragment size (bp)"
    ###################################
    data = pd.read_csv(ifileT2, delimiter='\t', names=['ID', 'Fragment'])
    data = data.drop(labels=0, axis=0)
    # delete fragment column
    # data.drop('Fragment', 1)
    data = data.drop(columns="Fragment")
    # split first column
    data = data[['ID' , "RF", 'OACC']] = data["ID"].str.split('|', expand=True)
    # data = data[['ID' , "RF", 'OACC']] = data["ID"].str.split('|')
    # data = data[['ID' , "RF", 'OACC']] = data.ID.apply(lambda x: pd.Series(str(x).split("|")))
    # remove the _bp text from fragment number
    df = data.replace(to_replace='_bp', value='', regex=True)[['ID', 'RF']]

    # make values as float to sort RF by increasing size
    df.RF = df.RF.astype(int)
    df = df.sort_values(by='RF')
    # add column of RF frequency
    df['frequency'] = df.groupby('RF')['RF'].transform('count')

    #
    ############################################################
    #Plot figure
    plt.figure()
    plt.ylabel(iYlabT2)
    plt.xlabel(iXlabT2)
    plt.title(ioutplottitleT2)
    #
    plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))
    #make grids
    plt.grid('on', which='major', axis='y', linestyle='-.', linewidth=0.25)
    plt.grid('on', which='major', axis='x', linestyle='-.', linewidth=0.25)

    # 
    MAX=int(df.RF.max())
    if MAX < 1000:
        ALPHA=0.9
        SIZE=50
    elif 100 < MAX < 2000:
        ALPHA=1
        SIZE=45
    elif 2000 < MAX < 3000:
        ALPHA=0.8
        SIZE=40
    elif 3000 < MAX:
        ALPHA=0.6
        SIZE=35
    
    # draw
    #Scatter_plot =
    plt.scatter(
        x=df.frequency,
        y=df.RF,
        s=SIZE,
        c = df.RF,
        cmap=icolrplotT2,
        alpha=ALPHA,
        edgecolors="black",
        linewidth=0.2,
        vmin=0)
    #    
    plt.draw()
    # add color map
    color_bar = plt.colorbar()
    color_bar.set_alpha(1)
    color_bar.draw_all()
    
    # save plot
    outplot = ioutputT2
    plt.savefig(outplot, bbox_inches='tight', dpi=300, format=ioutfmtT2)
    plt.close()
    ############################################################
    #Plot figure
    plt.figure()
    plt.ylabel(iYlabT2)
    plt.xlabel(iXlabT2)
    plt.title(ioutplottitleT2)
    plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))

    # draw
    # histogram
    plt.hist(x=df.RF, rwidth=0.5)
    plt.draw()
    outplot = ioutputT2.replace("_CLUSTERPLOT." ,"_HISTOGRAM.")
    plt.savefig(outplot, bbox_inches='tight', dpi=300, format=ioutfmtT2)
    plt.close()
    ############################################################
    
    df_part = np.array_split(df, 10)

    for i in range(0,10):
        
        MIN=min(df_part[i].RF)
        MAX=max(df_part[i].RF)
        
        #Plot figure
        plt.figure()
        plt.ylabel(iYlabT2)
        plt.xlabel(iXlabT2)
        plt.title(ioutplottitleT2)
        #make grids
        plt.grid('on', which='major', axis='y', linestyle='-.', linewidth=0.25)
        plt.grid('on', which='major', axis='x', linestyle='-.', linewidth=0.25)
        #
        plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))       
        plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))       
        # draw
        # Scatter_plot
        plt.scatter(
            y=df_part[i].frequency,
            x=df_part[i].RF,
            cmap=icolrplotT2,
            edgecolors="black",
            linewidth=1,
            vmin=MIN)
        #
        plt.draw()        
        # save plot
        ioutputT3 = ioutputT2.replace("_CLUSTERPLOT.png","") + "_" + str(i) + "_clstr." + ioutfmtT2
        plt.savefig(ioutputT3, bbox_inches='tight', dpi=ioutsizeT2, format=ioutfmtT2)
        plt.close()
    #
    for i in range(0,10):
        
        MIN=min(df_part[i].RF)
        MAX=max(df_part[i].RF)
        
        # histogram =
        plt.figure()
        plt.ylabel(iYlabT2)
        plt.xlabel(iXlabT2)
        plt.title(ioutplottitleT2)
        #
        plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
        plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))
        plt.xlim(MIN, MAX)
        #
        plt.hist(x=df_part[i].RF, rwidth=0.5)
        #
        plt.draw()
        ioutputT3 = ioutputT2.replace("_CLUSTERPLOT.png","") + "_" + str(i) + "_hist." + ioutfmtT2
        plt.savefig(ioutputT3, bbox_inches='tight', dpi=ioutsizeT2, format=ioutfmtT2)
        plt.close()



########################################################## # Run code tab1
########################################################## # Frame end
# quit / exit / cancel button
quitT1 = ttk.Button(tab1, text='Cancel', command=win.destroy)
quitT1.grid(column=0, row=13, sticky=tk.E, padx = 4, pady=0)
# default
defaultT1text = ttk.Label(tab1, text="*=required!")
defaultT1text.grid(column=0, row=14, sticky=tk.E, padx = 4, pady=0)
defaultT1text.configure(foreground="red")

# run button tab 1
runT1label = ttk.Label(tab1, text="Execute!")
runT1label.grid(column=0, row=14, sticky=tk.W, padx = 4, pady=0)


# info popup
def doneBox():
    msg.showinfo("REDigest Message!","Processing Complete!")


# code
def run_redigest_code():
        redigest_code()
        run_visuCode()
        runT1btn.configure(text="Done")
        quitT1.configure(text="Exit")
        runT1label.configure(text="Complete!")
        runT1label.configure(foreground="green")
        doneBox()


#
runT1btn = ttk.Button(tab1, text="Run", command=run_redigest_code)
runT1btn.grid(column=0, row=13, sticky=tk.W, padx = 4, pady=0)

# ttk.Button(win, text="Run", command=argscheck).grid(column=0, row=13, sticky=tk.W)
##########################################################

########################################################### Run code tab2
#quit buttom
quitT2 = ttk.Button(tab2, text='Cancel', command=win.destroy)
quitT2.grid(column=0, row=13, sticky=tk.E, padx = 4, pady=0)
# default
defaultT2text = ttk.Label(tab2, text="*=required!")
defaultT2text.grid(column=0, row=14, sticky=tk.E, padx = 4, pady=0)
defaultT2text.configure(foreground="red")
# run label
runT2label = ttk.Label(tab2, text="Execute!")
runT2label.grid(column=0, row=14, sticky=tk.W, padx = 4, pady=0)


# code
def run_visu_codeT2():
        visu_codeT2()
        runT2btn.configure(text="Done")
        quitT2.configure(text="Exit")
        runT2label.configure(text="Complete!")
        runT2label.configure(foreground="green")
        doneBox()


#
runT2btn = ttk.Button(tab2, text="Run", command=run_visu_codeT2)
runT2btn.grid(column=0, row=13, sticky=tk.W, padx = 4, pady=0)

############################################################
# run the GUI
win.mainloop()
exit()
# End of script
